15/02/25
Example:
import React,{useState,useEffect,useRef} from "react";
import "./App.css";
function CounterWithPrev(){
  const [count, setCount] = useState(0);
  const prevCountRef = useRef(0);
  useEffect(() => {
    prevCountRef.current = count;
    }, [count]);
    return (
      <div className='message'>
        <p>Current Count: {count}</p>
        <p>PrevCount: {prevCountRef.current}</p>
        <button onClick={() => setCount(count + 1)}>Increment</button>
        <button onClick={() => setCount(count - 1)}>decrement</button>
      </div>
    )
}
export default CounterWithPrev;

App.js:
import React from 'react';
// import { ListProvider } from './ListContext';
// import AddItem from './AddItem';
// import ItemList from './ItemList';
// import "./App.css";

// const App = () => {
//   return (
//     <ListProvider>
//       <div className='message'>
//         <h2>Item Management App</h2>
//         <AddItem />
//         <ItemList />
//       </div>
//     </ListProvider>
//   );
// };

// export default App;
// import React, { useState } from "react";
// import Child from './components/Child';
// const Parent=()=>{
//   const [message,setMessage]=useState('Hello Guna')

//   const changeMessage=()=>{
//     setMessage('Hello button is clicked')
//   };
//   return (
//     <div>
//       <h1>
//         {message}
//       </h1>
//       <Child changeMessage={changeMessage}/>
//     </div>
//   )
// }
// export default Parent;

ListContext.js:
import React, { createContext, useReducer } from 'react';

const ListContext = createContext();

const listReducer = (state, action) => {
  switch (action.type) {
    case 'ADD_ITEM':
      return [...state, { id: Date.now(), text: action.payload }];
    case 'REMOVE_ITEM':
      return state.filter(item => item.id !== action.payload);
    default:
      return state;
  }
};

export const ListProvider = ({ children }) => {
  const [list, dispatch] = useReducer(listReducer, []);

  return (
    <ListContext.Provider value={{ list, dispatch }}>
      {children}
    </ListContext.Provider>
  );
};

export default ListContext;

ItemList.js:
import React, { useContext, useMemo } from 'react';
import ListContext from './ListContext';

const ItemList = () => {
  const { list, dispatch } = useContext(ListContext);

  const memoizedList = useMemo(() => list, [list]);

  return (
    <div>
      <h3>Item List ({memoizedList.length})</h3>
      <ul>
        {memoizedList.map((item) => (
          <li key={item.id}>
            {item.text} <button onClick={() => dispatch({ type: 'REMOVE_ITEM', payload: item.id })}>Remove</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ItemList;
AddItem.js:
import React, { useState, useContext } from 'react';
import ListContext from './ListContext';

const AddItem = () => {
  const [input, setInput] = useState('');
  const { dispatch } = useContext(ListContext);

  const addItem = () => {
    if (input.trim()) {
      dispatch({ type: 'ADD_ITEM', payload: input });
      setInput('');
    }
  };

  return (
    <div>
      <input type="text" value={input} onChange={(e) => setInput(e.target.value)} />
      <button onClick={addItem}>Add Item</button>
    </div>
  );
};

export default AddItem;
